package Graph;

import java.util.*;

public class MinimizeMalwareSpreads {

    class DisjointSet {
        List<Integer> parent, size;
        public DisjointSet(int v) {
            this.parent = new ArrayList<>();
            this.size = new ArrayList<>();
            for (int i = 0; i <= v; i++) {
                parent.add(i);
                size.add(1);
            }
        }

        public int findParent(int node) {
            if (node == parent.get(node))
                return node;

            int parentNode = findParent(parent.get(node));
            parent.set(node, parentNode);
            return parentNode;
        }

        public void unionBySize(int u, int v) {
            int parent_u = findParent(u);
            int parent_v = findParent(v);
            if (parent_u == parent_v)
                return;

            if (size.get(parent_v) < size.get(parent_u)) {
                parent.set(parent_v, parent_u);
                size.set(parent_u, size.get(parent_u) + size.get(parent_v));
            }
            else {
                parent.set(parent_u, parent_v);
                size.set(parent_v, size.get(parent_u) + size.get(parent_v));
            }
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int V = graph.length;
        DisjointSet ds = new DisjointSet(V);

        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {
                if (graph[i][j] == 1) {
                    int u = ds.findParent(i);
                    int v = ds.findParent(j);
                    if (u != v)
                        ds.unionBySize(u, v);
                }
            }
        }

        int[] affected = new int[V];
        for (int i : initial) {
            int parent = ds.findParent(i);
            affected[parent]++;
        }

        int ans = -1, maxSize = -1;
        for (int i : initial) {
            int parent = ds.findParent(i);
            if (affected[parent] == 1 && ds.size.get(parent) >= maxSize) 	{
                if (maxSize == ds.size.get(parent))
                    ans = Math.min(ans, i);
                else {
                    ans = i;
                    maxSize = ds.size.get(parent);
                }
            }
        }

        if (ans == -1) {
            Arrays.sort(initial);
            return initial[0];
        }
        return ans;
    }

    public static void main(String[] args) {

    }
}
